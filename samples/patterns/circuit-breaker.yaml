type: deployment
name: pattern-circuit-breaker
entrypoints:
  in:
    protocol: tcp:30000
    mapping: in
model:
  type: composite
  imports:
    Forwarder: samples/components/forwarder.yaml
    Service:
      name: Service
      type: basic
      cardinality: "[1:1]"
      runtime: docker
      source: node?cmd=echo "$$APP" > main.js; node main
      variables:
        APP: |
          const os = require('os');
          let up = true;
          require('http').createServer((req, res) => {
              if (!up) {
                  req.socket.destroy();
                  res.socket.unref();
              } else if (req.url.startsWith('/break')) {
                  let seconds = req.url.split('=')[1];
                  up = false;
                  res.writeHead(302, {'Location': '/'});
                  res.end();        
                  setTimeout(() => {        
                      up = true;
                  }, Number(seconds)*1000);
              } else {
                  res.end(`
                      <!doctype html>
                      <html>
                        <head>
                          <title>Circuit breaker pattern</title>
                        </head>
                        <body>
                          <h1>Circuit breaker is closed</h1>
                          <h1>The service is running</h1>
                          <form action="/break" method="get">
                              <input type="submit" value="Break"></input>
                              and wait for 
                              <input type="text" name="seconds" value="5">
                              seconds                    
                          </form>
                        </body>
                      </html>
                      `);
              }
          }).listen(80);
      endpoints:
        in:
          type: in
          protocol: tcp:80
    CircuitBreaker:
      name: CircuitBreaker
      type: basic
      runtime: docker
      source: node?cmd=mkdir app; cd app; npm install opossum; echo "$$APP" > main.js; node main
      variables:
        APP: |
          const http = require('http');
          const url = require('url');
          const CircuitBreaker = require('opossum');

          require('http').createServer((req, res) => {
              let svc = {
                  dns: process.env.SVC_DNS,
                  port: Number(process.env.SVC_PORT)
              };
              let opts = new url.URL('http://' + svc.dns + ':' + svc.port + req.url);
              let breaker = new CircuitBreaker(makeRequest);
              breaker.fallback(() => {
                  res.end(`
                      <!doctype html>
                      <html>
                        <head>
                          <title>Circuit breaker pattern</title>
                        </head>
                        <body>
                          <h1>Circuit breaker is open</h1>
                          <h1>Waiting for the service to recover ...</h1>
                          <h1>Try again in a few seconds</h1>
                        </body>
                      </html>
                      `);
              });
              breaker.fire(opts, req, res)
                  .then(console.log)
                  .catch(console.error);
          }).listen(80);

          function makeRequest(opts, req, res) {
            return new Promise((resolve, reject) => {
              let serverReq = http.request(opts, (serverRes) => { 
                  resolve(serverRes.statusCode);
                  res.writeHead(serverRes.statusCode, serverRes.headers);
                  serverRes.pipe(res, {end:true});
              });
              serverReq.on("error", (err) => {
                  reject(err)
              });
              req.pipe(serverReq);
            });
          }
      endpoints:
        in:
          type: in
          protocol: tcp:80
        svc:
          type: out
          protocol: tcp:80
  subcomponents:
    c: 
      type: Forwarder
      variables:
        IN_PORT: 80
        OUT_PORT: 80
    svc: Service    
  connectors:
    lb:
      type: LoadBalancer
      outputs:
        - c.in
    cb: 
      type: CircuitBreaker
      inputs:
        - c.out
      outputs:
        - svc.in
  endpoints:
    in:
      type: in
      protocol: tcp:80
      mapping: lb