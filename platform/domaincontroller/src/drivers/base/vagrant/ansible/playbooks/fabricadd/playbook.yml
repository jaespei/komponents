---
# Variables:
# - var_workingDir
# - var_domainPrivateKey
# - var_domainPublicKey
# - var_domainUser
# - var_fabricAddr
#
# Requirements: 
# - Ansible collection ansibe.posix
#

# ------------------------------
#  Prepare fabric connection
# ------------------------------
- name: Prepare fabric connection
  hosts: localhost
  connection: local
  tasks:
    - name: Create working dir
      file:
        path: "{{ var_workingDir }}"
        state: directory

    - name: Set domain private key path
      when: var_domainPrivateKey is defined
      set_fact: 
        var_domainPrivateKeyPath: "{{ var_workingDir }}/{{ ansible_date_time.epoch | int | random | to_uuid }}" 

    - name: Write temporal domain private key locally
      when: var_domainPrivateKey is defined
      copy:
        content: "{{ var_domainPrivateKey }}"
        dest: "{{ var_domainPrivateKeyPath }}"
        mode: "600"

    - name: Write temporal domain public key locally
      when: var_domainPublicKey is defined
      copy:
        content: "{{ var_domainPublicKey }}"
        dest: "{{ var_domainPrivateKeyPath }}.pub"

    - name: Add in-mem host
      add_host:
        name: fabric
        ansible_host: "{{ var_fabricAddr }}"
        ansible_ssh_private_key_file: "{{ var_domainPrivateKeyPath }}"
      changed_when: false

# ------------------------------
#  Add new fabric
# ------------------------------
- name: Add new fabric
  hosts: fabric
  tasks:

    - name: Install required software
      become: yes
      apt:
        update_cache: yes
        cache_valid_time: 3600
        name: "{{ item }}"
      with_items:
        - virtualbox
        - vagrant

    - name: Add vhosts folder
      become: yes
      file: 
        path: "/home/{{ var_domainUser }}/vhosts"
        state: directory
        owner: "{{ var_domainUser }}"

    - name: KOMPONENTS_RESULT
      set_fact:
        result:
          hostname: "{{ ansible_hostname }}"
          mem: "{{ ansible_memtotal_mb }}"
          cpu: "{{ ansible_processor_cores }}"
          ifaces: "{{ ansible_facts | dict2items | selectattr('key','in', ansible_facts.interfaces) | list | items2dict }}"
          iface: "{{ ansible_default_ipv4 }}"
          os: 
            name: "{{ ansible_distribution }}"
            version: "{{ ansible_distribution_version }}"
#          devs: "{{ ansible_facts.devices | dict2items | selectattr('key','in', ansible_facts.device_links.ids.keys()) | list | items2dict }}"
          kernel: "{{ ansible_kernel }}"

#   - name: Obtain devices
#     set_fact:
#        result:
#          devs: "{{ result.devs|default([]) + [{'dev': item, 'size': ansible_facts.devices[item].size }] }}"
#      vars: 
#        dev_names: "{{ ansible_facts.devices.keys() | select('in', ansible_facts.device_links.ids.keys()) | list }}"
#      loop: "{{ dev_names }}"

#    - debug: var=hostvars

# ------------------------------
#  Clean-up fabric connection
# ------------------------------
- name: Clean-up fabric connection
  hosts: localhost
  connection: local
  tasks:
    - name: Delete domain private key
      when: var_domainPrivateKey is defined
      file: 
        path: "{{ var_domainPrivateKeyPath }}"
        state: absent

    - name: Delete domain public key
      when: var_domainPublicKey is defined
      file: 
        path: "{{ var_domainPrivateKeyPath }}.pub"
        state: absent